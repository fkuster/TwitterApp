#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TwitterApp:server');
var http = require('http');
var Twit = require('twit')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);




var T = new Twit({
    consumer_key:         'cjeIx2tj6DNIpIcgAzd3ZtWR4'
  , consumer_secret:      'a1lc7NDOlcjCRTVLNbEJNzJX4vf8b220QXOSjj4jfJ6gOv5JVI'
  , access_token:         '2838383056-fFE7VHrWhcRcNn9qYI8PLVybpecgQveu8wETLWU'
  , access_token_secret:  'aLVYEu1HPSJRfd1ULW3tKugGQnhZAk9HsHJvn7ISVC2oR'
})


io.on('connection', function (socket) {
  console.log("connected")


  socket.on('disconnectt', function () {
    console.log("Socket je ugaÅ¡en!")

    });

  socket.on('start', function (data) {
    console.log("Primanje podatka pokrenuto!")
    console.log("Kljuc je: " + data.kljuc)
    if(data.kljuc!='')   var stream = T.stream('statuses/filter', {'track':data.kljuc})
    else var stream = T.stream('statuses/filter', {locations:'-180,-90,180,90'})

    stream.on('tweet', function (tweet) {
     console.log(tweet)
    //console.log(tweet.coordinates||tweet.place.bounding_box.coordinates)


    //  console.log("Tweet sent!")
    if (tweet.coordinates !== null){
      var gpsCords = {"latitude": tweet.coordinates.coordinates[0],
                      "longitude": tweet.coordinates.coordinates[1],
                      "text":tweet.text,
                      "user":tweet.user.screen_name};
       socket.emit('tweet', gpsCords);
    }
    })
      });





});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
